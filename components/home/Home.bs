import "pkg:/source/api/baserequest.bs"
import "pkg:/source/api/Image.bs"
import "pkg:/source/api/sdk.bs"
import "pkg:/source/enums/ColorPalette.bs"
import "pkg:/source/enums/ItemType.bs"
import "pkg:/source/enums/KeyCode.bs"
import "pkg:/source/enums/TaskControl.bs"
import "pkg:/source/utils/config.bs"
import "pkg:/source/utils/deviceCapabilities.bs"
import "pkg:/source/utils/misc.bs"

sub init()
    m.isFirstRun = true
    m.top.overhangTitle = ""
    m.top.optionsAvailable = false
    m.postTask = createObject("roSGNode", "PostTask")

    m.loadItemsTask1 = createObject("roSGNode", "LoadItemsTask")
    m.loadItemsTask1.observeField("content", "onMyListLoaded")
    m.loadItemsTask1.itemsToLoad = "isInMyList"

    m.homeRows = m.top.findNode("homeRows")
    m.homeRows.focusBitmapBlendColor = chainLookupReturn(m.global.session, "user.settings.colorCursor", ColorPalette.HIGHLIGHT)

    ' Create random background task
    m.randomBackgroundTask = createObject("roSGNode", "RandomBackgroundTask")
    m.randomBackgroundTask.observeField("backdropURL", "onBackdropURLChanged")

    ' Set up backdrop overlay with configurable opacity
    m.backdropOverlay = m.top.findNode("backdropOverlay")
    overlayOpacity = chainLookupReturn(m.global.session, "user.settings.backgroundOverlayOpacity", 0.94)
    if isValid(m.backdropOverlay)
        m.backdropOverlay.opacity = overlayOpacity
    end if

    ' Only set up random backgrounds if the feature is enabled (default to true)
    randomBackgroundsEnabled = chainLookupReturn(m.global.session, "user.settings.enableRandomBackgrounds", true)
    if randomBackgroundsEnabled
        ' Create timer to change background every X minutes (configurable, default 2 minutes)
        backgroundInterval = chainLookupReturn(m.global.session, "user.settings.backgroundChangeInterval", 120)
        m.backgroundTimer = createObject("roSGNode", "Timer")
        m.backgroundTimer.duration = backgroundInterval
        m.backgroundTimer.repeat = true
        m.backgroundTimer.observeField("fire", "onBackgroundTimerFired")
        m.backgroundTimer.control = "start"

        setRandomBackground() ' Call to set a random movie background
    end if
end sub

' Function to fetch and set a random movie backdrop
sub setRandomBackground()
    if isValid(m.randomBackgroundTask)
        m.randomBackgroundTask.control = "RUN"
    end if
end sub

' Callback when backdrop URL is fetched
sub onBackdropURLChanged()
    backdropURL = m.randomBackgroundTask.backdropURL
    if isValidAndNotEmpty(backdropURL)
        backdrop = m.top.findNode("backdrop")
        if isValid(backdrop)
            backdrop.uri = backdropURL
        end if
    end if
end sub

' Timer callback to change background periodically
sub onBackgroundTimerFired()
    setRandomBackground()
end sub

' Function to update backdrop overlay settings
sub updateBackdropOverlay()
    if not isValid(m.backdropOverlay) then return

    ' Get overlay settings from user preferences
    overlayOpacity = chainLookupReturn(m.global.session, "user.settings.backgroundOverlayOpacity", 0.94)
    overlayColor = chainLookupReturn(m.global.session, "user.settings.backgroundOverlayColor", "0x000000")

    m.backdropOverlay.opacity = overlayOpacity
    m.backdropOverlay.color = overlayColor
end sub

sub refresh()
    m.homeRows.focusBitmapBlendColor = chainLookupReturn(m.global.session, "user.settings.colorCursor", ColorPalette.HIGHLIGHT)
    m.homeRows.callFunc("updateHomeRows")

    ' Update backdrop overlay settings
    updateBackdropOverlay()

    ' Only refresh background if random backgrounds are enabled
    randomBackgroundsEnabled = chainLookupReturn(m.global.session, "user.settings.enableRandomBackgrounds", true)
    if randomBackgroundsEnabled
        setRandomBackground() ' Refresh the background on each refresh
    end if
end sub

sub loadLibraries()
    m.homeRows.callFunc("loadLibraries")
end sub

' JFScreen hook called when the screen is displayed by the screen manager
sub OnScreenShown()
    m.homeRows.rowLabelColor = chainLookupReturn(m.global.session, "user.settings.colorHomeRowHeaders", ColorPalette.WHITE)

    scene = m.top.getScene()
    overhang = scene.findNode("overhang")
    if isValid(overhang)
        overhang.visible = true
        overhang.title = ""
        overhang.currentUserProfileImage = UserImageURL(m.global.session.user.id)
        overhang.currentUser = m.global.session.user.name
    end if

    if isValid(m.top.lastFocus)
        if LCase(m.top.lastFocus.id) = "overhang"
            overhang.callFunc("highlightUser")
        end if
        m.top.lastFocus.setFocus(true)
    else
        m.top.setFocus(true)
        group = m.global.sceneManager.callFunc("getActiveScene")
        group.lastFocus = m.top
    end if

    if not m.isFirstRun
        refresh()
    end if

    ' post the device profile the first time this screen is loaded
    if m.isFirstRun
        m.isFirstRun = false
        m.postTask.arrayData = getDeviceCapabilities()
        m.postTask.apiUrl = "/Sessions/Capabilities/Full"
        m.postTask.control = "RUN"
        m.postTask.observeField("responseCode", "postFinished")
    end if
end sub

' JFScreen hook called when the screen is hidden by the screen manager
sub OnScreenHidden()
    scene = m.top.getScene()
    overhang = scene.findNode("overhang")
    if isValid(overhang)
        overhang.callFunc("dehighlightUser")
        overhang.currentUser = ""
        overhang.title = ""
    end if
end sub

' Triggered by m.postTask after completing a post.
' Empty the task data when finished.
sub postFinished()
    m.postTask.unobserveField("responseCode")
    m.postTask.callFunc("empty")
end sub

sub onMyListLoaded()
    isInMyListData = m.loadItemsTask1.content
    m.loadItemsTask1.content = []

    if not isValidAndNotEmpty(isInMyListData) then return

    focusedItem = m.homeRows.content.getChild(m.homeRows.rowItemFocused[0]).getChild(m.homeRows.rowItemFocused[1])
    if not isValid(focusedItem) then return

    dialogData = []
    paramData = {
        id: focusedItem.LookupCI("id")
    }

    if isInMyListData[0]
        dialogData.push(tr("Remove From My List"))
    else
        if inArray([ItemType.EPISODE, ItemType.MOVIE, ItemType.SEASON, ItemType.SERIES, ItemType.VIDEO, ItemType.MUSICVIDEO, ItemType.RECORDING, ItemType.BOXSET], focusedItem.LookupCI("type"))
            dialogData.push(tr("Add To My List"))
        end if
    end if

    dialogData.push(tr("Add To Playlist"))

    if inArray([ItemType.EPISODE, ItemType.MOVIE, ItemType.SEASON, ItemType.SERIES, ItemType.VIDEO, ItemType.MUSICVIDEO, ItemType.RECORDING, ItemType.BOXSET, ItemType.AUDIOBOOK, ItemType.BOOK], focusedItem.LookupCI("type"))
        showBothOptions = false
        if isChainValid(focusedItem, "PlayedPercentage")
            if focusedItem.PlayedPercentage > 0
                showBothOptions = true
            end if
        end if

        if showBothOptions
            dialogData.push(tr("Mark As Unplayed"))
            dialogData.push(tr("Mark As Played"))
        else
            if isChainValid(focusedItem, "isWatched")
                if focusedItem.isWatched
                    dialogData.push(tr("Mark As Unplayed"))
                else
                    dialogData.push(tr("Mark As Played"))
                end if
            end if
        end if
    end if

    if inArray([ItemType.EPISODE, ItemType.SEASON], focusedItem.LookupCI("type"))
        dialogData.push(tr("Go To Series"))
        dialogData.push(tr("Go To Season"))
        paramData.SeasonId = focusedItem.json.LookupCI("SeasonId")
        paramData.SeriesId = focusedItem.json.LookupCI("SeriesId")
    end if

    if inArray([ItemType.MUSICALBUM], focusedItem.LookupCI("type"))
        dialogData.push(tr("Go To Artist"))
        paramData.ArtistId = focusedItem.json.LookupCI("AlbumArtistId")
        paramData.ArtistName = focusedItem.json.LookupCI("albumartist")
    end if

    m.global.sceneManager.callFunc("optionDialog", "libraryitem", focusedItem.LookupCI("title") ?? tr("Options"), [], dialogData, paramData)
end sub

' Special handling for key presses on the home screen.
function onKeyEvent(key as string, press as boolean) as boolean
    if not press then return false

    ' If the user hit back and is not on the first item of the row,
    ' assume they want to go to the first item of the row.
    ' Otherwise, they are exiting the app.
    if isStringEqual(key, KeyCode.Back) and m.homeRows.currFocusColumn > 0
        m.homeRows.jumpToRowItem = [m.homeRows.currFocusRow, 0]
        return true
    end if

    if isStringEqual(key, KeyCode.OPTIONS)
        if m.homeRows.hasFocus()
            focusedItem = m.homeRows.content.getChild(m.homeRows.rowItemFocused[0]).getChild(m.homeRows.rowItemFocused[1])
            if not isValidAndNotEmpty(focusedItem) then return false

            if inArray([ItemType.COLLECTIONFOLDER, ItemType.CHANNEL, ItemType.FOLDER, ItemType.PLAYLIST, ItemType.PROGRAM, ItemType.TVCHANNEL, ItemType.USERVIEW], focusedItem.type) then return false

            m.loadItemsTask1.itemId = focusedItem.LookupCI("id")
            m.loadItemsTask1.control = TaskControl.RUN
            return true
        end if
    end if

    return false
end function
